{"version":3,"sources":["../../../JSite/front_end/src/interfaces/logs.js","../../../JSite/front_end/src/local/logUtil.js","../../../JSite/front_end/src/views/Logs/Logs.jsx"],"names":["_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","Axios","get","stop","_callee2","datestring","_context2","params","paramsSerializer","qs","stringify","arrayFormat","logTool","window","sessionStorage","getItem","JSON","parse","logArr","setItem","id","logs","forEach","item","index","splice","componentName","_UNMOUNTED","state","data","history","onChange","date","dateString","_x","_getLogs","apply","this","arguments","getLogs","then","res","_this","status","setState","result","catch","err","console","log","_this2","Log","getList","_listLog","listLog","save","dir","RangePicker","DatePicker","thisIp","react_default","createElement","className","map","Object","wrapRegExp","ip","timestamp","computerName","os","method","path","exec","groups","logItem","key","divider","Component"],"mappings":"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","file":"static/js/13.9def76ff.chunk.js","sourcesContent":["import Axios from \"axios\";\nimport qs from \"qs\";\n\n// 获取当日的日志\nexport async function listLog() {\n    return Axios.get(\"/api/list/log\")\n}\n\n// 获取目标日期范围内的日志列表\nexport async function getLogs(datestring) {\n    return Axios.get(\"/api/get/logs\",\n        {\n            params: {\n                datestring: datestring\n            },\n            paramsSerializer: function (params) {\n                return qs.stringify(params, {arrayFormat: 'repeat'})\n            }\n        }\n    )\n}","const logTool = {}\n\n// 获取标签列表\nlogTool.getList = () => {\n    return window.sessionStorage.getItem(\"logs\") ? JSON.parse(window.sessionStorage.getItem(\"logs\")) : null;\n}\n\n// 将标签列表保存起来\nlogTool.save = (logArr) => {\n    window.sessionStorage.setItem(\"logs\", JSON.stringify(logArr));\n}\n\n// 删除标签\nlogTool.delete = (id) => {\n    const logs = window.sessionStorage.getItem(\"logs\") ? JSON.parse(window.sessionStorage.getItem(\"logs\")) : [];\n    logs.forEach((item, index) => {\n        if (item.id === id) logs.splice(index, 1);\n    });\n    window.sessionStorage.setItem(\"logs\", JSON.stringify(logs));\n}\n\n\nexport default logTool;","import React, {Component} from 'react';\nimport {listLog, getLogs} from \"../../interfaces/logs\";\nimport {Divider, DatePicker} from \"antd\";\nimport Log from \"../../local/logUtil\";\n\nimport \"./logs.scss\";\n\nexport default class componentName extends Component {\n\n    _UNMOUNTED = false\n\n    state = {\n        data: [],\n        history: []\n    }\n\n    componentDidMount() {\n        if (Log.getList()) { // 首先尝试从本地缓存读取\n            return this.setState({\n                data: Log.getList()\n            })\n        }\n        listLog() // 从服务器读取\n            .then(res => {\n                if (res.data.status === \"OK\") {\n                    Log.save(res.data.result); // 保存缓存\n                    if (this._UNMOUNTED) return;\n                    // 请求成功\n                    this.setState({\n                        data: res.data.result,\n                        history: res.data.dir\n                    })\n                }\n\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    render() {\n        const {RangePicker} = DatePicker;\n        let thisIp = -1; // 初始化人员计数\n        const data = this.state.data;\n        return (\n            <div className=\"logs\">\n                <div className=\"history\">\n                    <div>\n                        <RangePicker onChange={this.onChange}/>\n                    </div>\n                </div>\n                {\n                    data && data.map((item, index) => {\n                        const reg = /(?<ip>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}.\\d{1,3}):\\[(?<timestamp>[\\d-:\\s]+)\\] (?<computerName>[\\S-]+) (?<os>\\S+) (?<method>\\S+) (?<path>\\S+)/;\n                        const result = reg.exec(item).groups;\n                        const ip = result.ip;\n                        const timestamp = result.timestamp;\n                        const computerName = result.computerName;\n                        const os = result.os;\n                        const method = result.method;\n                        const path = result.path;\n\n                        const logItem = (\n                            <div key={timestamp + index + \"\"} className=\"log-item\">\n                                <span className=\"item\">[<span className=\"timestamp\">{timestamp}</span>]</span>\n                                <span className=\"item computer-name\">{computerName}</span>\n                                <span className=\"item os\">{os}</span>\n                                <span className=\"item method\">{method}</span>\n                                <span className=\"item path\">{path}</span>\n                            </div>\n                        )\n\n                        if (thisIp === ip) return logItem\n                        else {\n                            thisIp = ip;\n                            return (\n                                <div className=\"log-item\" key={timestamp + index + \"\"}>\n                                    <Divider/>\n                                    <div className=\"ip\">{thisIp}</div>\n                                    {logItem}\n                                </div>\n                            )\n                        }\n                    })\n                }\n            </div>\n        )\n    }\n\n    onChange = (date, dateString) => {\n        // console.log(new Date(dateString[0]) , new Date(dateString[1]))\n        getLogs(dateString)\n            .then(res => {\n                // console.log(res)\n                if (this._UNMOUNTED) return;\n                if (res.data.status === \"OK\") {\n                    // 请求成功\n                    this.setState({data: res.data.result})\n                }\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n}\n"],"sourceRoot":""}